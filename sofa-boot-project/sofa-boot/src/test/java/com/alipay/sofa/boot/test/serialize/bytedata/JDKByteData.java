/*
 * Ant Group
 * Copyright (c) 2004-2023 All Rights Reserved.
 */
package com.alipay.sofa.boot.test.serialize.bytedata;

import org.junit.Test;
import org.springframework.util.StringUtils;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * JDKSerializeByteData
 *
 * @author xunfang
 * @version JDKSerializeByteData.java, v 0.1 2023/7/17
 */
public class JDKByteData extends BaseData{
    private static final Map<String, byte[]> byteData = new HashMap<>();

    /**
     * 当需要更新序列化数组时，执行此逻辑，并删除除第一个数组（binary_0_Bytes）外的其他数组文件头标识：-84, -19, 0, 5
     * @param args
     * @throws IOException
     */
    public static void main(String[] args) throws IOException {
        loadData();
        for (Map.Entry<String, Object> entry : metaData.entrySet()) {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            ObjectOutputStream output = new ObjectOutputStream(os);
            output.writeObject(entry.getValue());
            output.close();
            byte[] data = os.toByteArray();
            byteData.put(entry.getKey(), data);
        }
        List<Map.Entry<String, byte[]>> byteDataList = new ArrayList<>(byteData.entrySet());
        byteDataList.sort(Map.Entry.comparingByKey());
        for (Map.Entry<String, byte[]> entry : byteDataList) {
            System.out.println(entry.getKey() + "_Bytes = new byte[]{"
                    + Arrays.toString(entry.getValue()).replace("[", "").replace("]", "")
                    + "};");
//            System.out.println("protected static byte[] " + entry.getKey() + "_Bytes;");
//            System.out.println("validate(" + entry.getKey() + "_Bytes, " + "dg.generate" + StringUtils.capitalize(entry.getKey()) + "(), " + "null" + ");");
//            System.out.println("Assert.assertEquals(" + "dg.generate" + StringUtils.capitalize(entry.getKey()) + "(), oin.readObject());");
        }
    }
    static {
        // 此处 -84, -19, 0, 5 字段为文件头标识"AC"，需保留
        binary_0_Bytes = new byte[]{-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 0};
        binary_1_Bytes = new byte[]{-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 1, 48};
        binary_15_Bytes = new byte[]{-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 15, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52};
        binary_16_Bytes = new byte[]{-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 16, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53};
        binary_null_Bytes = new byte[]{-84, -19, 0, 5, 112};
        date_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 68, 97, 116, 101, 104, 106, -127, 1, 75, 89, 116, 25, 3, 0, 0, 120, 112, 119, 8, 0, 0, 0, 0, 0, 0, 0, 0, 120};
        date_1_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 68, 97, 116, 101, 104, 106, -127, 1, 75, 89, 116, 25, 3, 0, 0, 120, 112, 119, 8, 0, 0, 0, -48, 75, -110, -124, -72, 120};
        date_2_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 68, 97, 116, 101, 104, 106, -127, 1, 75, 89, 116, 25, 3, 0, 0, 120, 112, 119, 8, 0, 0, 0, -48, 75, -110, 11, -96, 120};
        double_0_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 0};
        double_0_001_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 63, 80, 98, 77, -46, -15, -87, -4};
        double_127_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 64, 95, -64, 0, 0, 0, 0, 0};
        double_128_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 64, 96, 0, 0, 0, 0, 0, 0};
        double_1_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 63, -16, 0, 0, 0, 0, 0, 0};
        double_2_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 64, 0, 0, 0, 0, 0, 0, 0};
        double_32767_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 64, -33, -1, -64, 0, 0, 0, 0};
        double_3_14159_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 64, 9, 33, -7, -16, 27, -122, 110};
        double_65_536_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 64, 80, 98, 77, -46, -15, -87, -4};
        double_m0_001_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -65, 80, 98, 77, -46, -15, -87, -4};
        double_m128_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -64, 96, 0, 0, 0, 0, 0, 0};
        double_m129_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -64, 96, 32, 0, 0, 0, 0, 0};
        double_m32768_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -64, -32, 0, 0, 0, 0, 0, 0};
        false_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 111, 111, 108, 101, 97, 110, -51, 32, 114, -128, -43, -100, -6, -18, 2, 0, 1, 90, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0};
        int_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0};
        int_0x30_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 48};
        int_0x3ffff_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 3, -1, -1};
        int_0x40000_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 4, 0, 0};
        int_0x7ff_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 7, -1};
        int_0x7fffffff_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 127, -1, -1, -1};
        int_0x800_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 8, 0};
        int_1_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 1};
        int_47_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 47};
        int_m0x40000_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -4, 0, 0};
        int_m0x40001_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -5, -1, -1};
        int_m0x800_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1, -8, 0};
        int_m0x80000000_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -128, 0, 0, 0};
        int_m0x801_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1, -9, -1};
        int_m16_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1, -1, -16};
        int_m17_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1, -1, -17};
        long_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 0};
        long_0x10_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 16};
        long_0x3ffff_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 3, -1, -1};
        long_0x40000_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 4, 0, 0};
        long_0x7ff_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 7, -1};
        long_0x7fffffff_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 127, -1, -1, -1};
        long_0x800_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 8, 0};
        long_0x80000000_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, -128, 0, 0, 0};
        long_1_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1};
        long_15_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 15};
        long_m0x40000_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1, -1, -1, -1, -4, 0, 0};
        long_m0x40001_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1, -1, -1, -1, -5, -1, -1};
        long_m0x800_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1, -1, -1, -1, -1, -8, 0};
        long_m0x80000000_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1, -1, -1, -128, 0, 0, 0};
        long_m0x80000001_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1, -1, -1, 127, -1, -1, -1};
        long_m0x801_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1, -1, -1, -1, -1, -9, -1};
        long_m8_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1, -1, -1, -1, -1, -1, -8};
        long_m9_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1, -1, -1, -1, -1, -1, -9};
        null_Bytes = new byte[]{-84, -19, 0, 5, 112};
        object_1_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 46, 99, 111, 109, 46, 97, 108, 105, 112, 97, 121, 46, 115, 111, 102, 97, 46, 98, 111, 111, 116, 46, 116, 101, 115, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 46, 84, 101, 115, 116, 79, 98, 106, 101, 99, 116, 45, 117, -88, -44, 121, 50, -38, -7, 2, 0, 7, 68, 0, 9, 100, 111, 117, 98, 108, 101, 86, 97, 114, 70, 0, 8, 102, 108, 111, 97, 116, 86, 97, 114, 73, 0, 6, 105, 110, 116, 86, 97, 114, 74, 0, 7, 108, 111, 110, 103, 86, 97, 114, 76, 0, 7, 101, 110, 117, 109, 86, 97, 114, 116, 0, 46, 76, 99, 111, 109, 47, 97, 108, 105, 112, 97, 121, 47, 115, 111, 102, 97, 47, 98, 111, 111, 116, 47, 116, 101, 115, 116, 47, 115, 101, 114, 105, 97, 108, 105, 122, 101, 47, 84, 101, 115, 116, 69, 110, 117, 109, 59, 76, 0, 9, 115, 116, 114, 105, 110, 103, 86, 97, 114, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 76, 0, 9, 115, 117, 98, 79, 98, 106, 101, 99, 116, 116, 0, 51, 76, 99, 111, 109, 47, 97, 108, 105, 112, 97, 121, 47, 115, 111, 102, 97, 47, 98, 111, 111, 116, 47, 116, 101, 115, 116, 47, 115, 101, 114, 105, 97, 108, 105, 122, 101, 47, 84, 101, 115, 116, 83, 117, 98, 79, 98, 106, 101, 99, 116, 59, 120, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 112, 112};
        object_2_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 46, 99, 111, 109, 46, 97, 108, 105, 112, 97, 121, 46, 115, 111, 102, 97, 46, 98, 111, 111, 116, 46, 116, 101, 115, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 46, 84, 101, 115, 116, 79, 98, 106, 101, 99, 116, 45, 117, -88, -44, 121, 50, -38, -7, 2, 0, 7, 68, 0, 9, 100, 111, 117, 98, 108, 101, 86, 97, 114, 70, 0, 8, 102, 108, 111, 97, 116, 86, 97, 114, 73, 0, 6, 105, 110, 116, 86, 97, 114, 74, 0, 7, 108, 111, 110, 103, 86, 97, 114, 76, 0, 7, 101, 110, 117, 109, 86, 97, 114, 116, 0, 46, 76, 99, 111, 109, 47, 97, 108, 105, 112, 97, 121, 47, 115, 111, 102, 97, 47, 98, 111, 111, 116, 47, 116, 101, 115, 116, 47, 115, 101, 114, 105, 97, 108, 105, 122, 101, 47, 84, 101, 115, 116, 69, 110, 117, 109, 59, 76, 0, 9, 115, 116, 114, 105, 110, 103, 86, 97, 114, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 76, 0, 9, 115, 117, 98, 79, 98, 106, 101, 99, 116, 116, 0, 51, 76, 99, 111, 109, 47, 97, 108, 105, 112, 97, 121, 47, 115, 111, 102, 97, 47, 98, 111, 111, 116, 47, 116, 101, 115, 116, 47, 115, 101, 114, 105, 97, 108, 105, 122, 101, 47, 84, 101, 115, 116, 83, 117, 98, 79, 98, 106, 101, 99, 116, 59, 120, 112, 64, 16, 0, 0, 0, 0, 0, 0, 64, 64, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 126, 114, 0, 44, 99, 111, 109, 46, 97, 108, 105, 112, 97, 121, 46, 115, 111, 102, 97, 46, 98, 111, 111, 116, 46, 116, 101, 115, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 46, 84, 101, 115, 116, 69, 110, 117, 109, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 110, 117, 109, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 112, 116, 0, 10, 69, 78, 85, 77, 95, 84, 89, 80, 69, 49, 116, 0, 3, 53, 46, 48, 115, 114, 0, 49, 99, 111, 109, 46, 97, 108, 105, 112, 97, 121, 46, 115, 111, 102, 97, 46, 98, 111, 111, 116, 46, 116, 101, 115, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 46, 84, 101, 115, 116, 83, 117, 98, 79, 98, 106, 101, 99, 116, -104, 63, -49, 111, -60, 39, -75, 110, 2, 0, 1, 76, 0, 5, 118, 97, 108, 117, 101, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 120, 112, 116, 0, 13, 116, 101, 115, 116, 83, 117, 98, 79, 98, 106, 101, 99, 116};
        object_3_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 114, 97, 121, 76, 105, 115, 116, 120, -127, -46, 29, -103, -57, 97, -99, 3, 0, 1, 73, 0, 4, 115, 105, 122, 101, 120, 112, 0, 0, 0, 2, 119, 4, 0, 0, 0, 2, 115, 114, 0, 46, 99, 111, 109, 46, 97, 108, 105, 112, 97, 121, 46, 115, 111, 102, 97, 46, 98, 111, 111, 116, 46, 116, 101, 115, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 46, 84, 101, 115, 116, 79, 98, 106, 101, 99, 116, 45, 117, -88, -44, 121, 50, -38, -7, 2, 0, 7, 68, 0, 9, 100, 111, 117, 98, 108, 101, 86, 97, 114, 70, 0, 8, 102, 108, 111, 97, 116, 86, 97, 114, 73, 0, 6, 105, 110, 116, 86, 97, 114, 74, 0, 7, 108, 111, 110, 103, 86, 97, 114, 76, 0, 7, 101, 110, 117, 109, 86, 97, 114, 116, 0, 46, 76, 99, 111, 109, 47, 97, 108, 105, 112, 97, 121, 47, 115, 111, 102, 97, 47, 98, 111, 111, 116, 47, 116, 101, 115, 116, 47, 115, 101, 114, 105, 97, 108, 105, 122, 101, 47, 84, 101, 115, 116, 69, 110, 117, 109, 59, 76, 0, 9, 115, 116, 114, 105, 110, 103, 86, 97, 114, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 76, 0, 9, 115, 117, 98, 79, 98, 106, 101, 99, 116, 116, 0, 51, 76, 99, 111, 109, 47, 97, 108, 105, 112, 97, 121, 47, 115, 111, 102, 97, 47, 98, 111, 111, 116, 47, 116, 101, 115, 116, 47, 115, 101, 114, 105, 97, 108, 105, 122, 101, 47, 84, 101, 115, 116, 83, 117, 98, 79, 98, 106, 101, 99, 116, 59, 120, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 112, 112, 112, 115, 113, 0, 126, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 112, 112, 112, 120};
        object_4_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 114, 97, 121, 76, 105, 115, 116, 120, -127, -46, 29, -103, -57, 97, -99, 3, 0, 1, 73, 0, 4, 115, 105, 122, 101, 120, 112, 0, 0, 0, 2, 119, 4, 0, 0, 0, 2, 115, 114, 0, 46, 99, 111, 109, 46, 97, 108, 105, 112, 97, 121, 46, 115, 111, 102, 97, 46, 98, 111, 111, 116, 46, 116, 101, 115, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 46, 84, 101, 115, 116, 79, 98, 106, 101, 99, 116, 45, 117, -88, -44, 121, 50, -38, -7, 2, 0, 7, 68, 0, 9, 100, 111, 117, 98, 108, 101, 86, 97, 114, 70, 0, 8, 102, 108, 111, 97, 116, 86, 97, 114, 73, 0, 6, 105, 110, 116, 86, 97, 114, 74, 0, 7, 108, 111, 110, 103, 86, 97, 114, 76, 0, 7, 101, 110, 117, 109, 86, 97, 114, 116, 0, 46, 76, 99, 111, 109, 47, 97, 108, 105, 112, 97, 121, 47, 115, 111, 102, 97, 47, 98, 111, 111, 116, 47, 116, 101, 115, 116, 47, 115, 101, 114, 105, 97, 108, 105, 122, 101, 47, 84, 101, 115, 116, 69, 110, 117, 109, 59, 76, 0, 9, 115, 116, 114, 105, 110, 103, 86, 97, 114, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 76, 0, 9, 115, 117, 98, 79, 98, 106, 101, 99, 116, 116, 0, 51, 76, 99, 111, 109, 47, 97, 108, 105, 112, 97, 121, 47, 115, 111, 102, 97, 47, 98, 111, 111, 116, 47, 116, 101, 115, 116, 47, 115, 101, 114, 105, 97, 108, 105, 122, 101, 47, 84, 101, 115, 116, 83, 117, 98, 79, 98, 106, 101, 99, 116, 59, 120, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 112, 112, 113, 0, 126, 0, 6, 120};
        string_0_Bytes = new byte[]{-84, -19, 0, 5, 116, 0, 0};
        string_1_Bytes = new byte[]{-84, -19, 0, 5, 116, 0, 1, 48};
        string_31_Bytes = new byte[]{-84, -19, 0, 5, 116, 0, 31, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48};
        string_32_Bytes = new byte[]{-84, -19, 0, 5, 116, 0, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49};
        string_null_Bytes = new byte[]{-84, -19, 0, 5, 112};
        true_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 111, 111, 108, 101, 97, 110, -51, 32, 114, -128, -43, -100, -6, -18, 2, 0, 1, 90, 0, 5, 118, 97, 108, 117, 101, 120, 112, 1};
        typedFixedList_0_Bytes = new byte[]{-84, -19, 0, 5, 117, 114, 0, 19, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 114, 105, 110, 103, 59, -83, -46, 86, -25, -23, 29, 123, 71, 2, 0, 0, 120, 112, 0, 0, 0, 0};
        typedFixedList_1_Bytes = new byte[]{-84, -19, 0, 5, 117, 114, 0, 19, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 114, 105, 110, 103, 59, -83, -46, 86, -25, -23, 29, 123, 71, 2, 0, 0, 120, 112, 0, 0, 0, 1, 116, 0, 1, 49};
        typedFixedList_7_Bytes = new byte[]{-84, -19, 0, 5, 117, 114, 0, 19, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 114, 105, 110, 103, 59, -83, -46, 86, -25, -23, 29, 123, 71, 2, 0, 0, 120, 112, 0, 0, 0, 7, 116, 0, 1, 49, 116, 0, 1, 50, 116, 0, 1, 51, 116, 0, 1, 52, 116, 0, 1, 53, 116, 0, 1, 54, 116, 0, 1, 55};
        typedFixedList_8_Bytes = new byte[]{-84, -19, 0, 5, 117, 114, 0, 19, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 114, 105, 110, 103, 59, -83, -46, 86, -25, -23, 29, 123, 71, 2, 0, 0, 120, 112, 0, 0, 0, 8, 116, 0, 1, 49, 116, 0, 1, 50, 116, 0, 1, 51, 116, 0, 1, 52, 116, 0, 1, 53, 116, 0, 1, 54, 116, 0, 1, 55, 116, 0, 1, 56};
        typedMap_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 116, 97, 98, 108, 101, 19, -69, 15, 37, 33, 74, -28, -72, 3, 0, 2, 70, 0, 10, 108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 8, 119, 8, 0, 0, 0, 11, 0, 0, 0, 0, 120};
        typedMap_1_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 116, 97, 98, 108, 101, 19, -69, 15, 37, 33, 74, -28, -72, 3, 0, 2, 70, 0, 10, 108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 8, 119, 8, 0, 0, 0, 11, 0, 0, 0, 1, 116, 0, 1, 97, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 120};
        typedMap_2_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 116, 97, 98, 108, 101, 19, -69, 15, 37, 33, 74, -28, -72, 3, 0, 2, 70, 0, 10, 108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 8, 119, 8, 0, 0, 0, 11, 0, 0, 0, 2, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 1, 116, 0, 1, 98, 115, 113, 0, 126, 0, 2, 0, 0, 0, 0, 116, 0, 1, 97, 120};
        typedMap_3_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 116, 97, 98, 108, 101, 19, -69, 15, 37, 33, 74, -28, -72, 3, 0, 2, 70, 0, 10, 108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 8, 119, 8, 0, 0, 0, 11, 0, 0, 0, 1, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 114, 97, 121, 76, 105, 115, 116, 120, -127, -46, 29, -103, -57, 97, -99, 3, 0, 1, 73, 0, 4, 115, 105, 122, 101, 120, 112, 0, 0, 0, 1, 119, 4, 0, 0, 0, 1, 116, 0, 1, 97, 120, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 120};
        untypedFixedList_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 114, 97, 121, 76, 105, 115, 116, 120, -127, -46, 29, -103, -57, 97, -99, 3, 0, 1, 73, 0, 4, 115, 105, 122, 101, 120, 112, 0, 0, 0, 0, 119, 4, 0, 0, 0, 0, 120};
        untypedFixedList_1_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 114, 97, 121, 76, 105, 115, 116, 120, -127, -46, 29, -103, -57, 97, -99, 3, 0, 1, 73, 0, 4, 115, 105, 122, 101, 120, 112, 0, 0, 0, 1, 119, 4, 0, 0, 0, 1, 116, 0, 1, 49, 120};
        untypedFixedList_7_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 114, 97, 121, 76, 105, 115, 116, 120, -127, -46, 29, -103, -57, 97, -99, 3, 0, 1, 73, 0, 4, 115, 105, 122, 101, 120, 112, 0, 0, 0, 7, 119, 4, 0, 0, 0, 7, 116, 0, 1, 49, 116, 0, 1, 50, 116, 0, 1, 51, 116, 0, 1, 52, 116, 0, 1, 53, 116, 0, 1, 54, 116, 0, 1, 55, 120};
        untypedFixedList_8_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 114, 97, 121, 76, 105, 115, 116, 120, -127, -46, 29, -103, -57, 97, -99, 3, 0, 1, 73, 0, 4, 115, 105, 122, 101, 120, 112, 0, 0, 0, 8, 119, 4, 0, 0, 0, 8, 116, 0, 1, 49, 116, 0, 1, 50, 116, 0, 1, 51, 116, 0, 1, 52, 116, 0, 1, 53, 116, 0, 1, 54, 116, 0, 1, 55, 116, 0, 1, 56, 120};
        untypedMap_0_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 77, 97, 112, 5, 7, -38, -63, -61, 22, 96, -47, 3, 0, 2, 70, 0, 10, 108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 0, 119, 8, 0, 0, 0, 16, 0, 0, 0, 0, 120};
        untypedMap_1_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 77, 97, 112, 5, 7, -38, -63, -61, 22, 96, -47, 3, 0, 2, 70, 0, 10, 108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 12, 119, 8, 0, 0, 0, 16, 0, 0, 0, 1, 116, 0, 1, 97, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 120};
        untypedMap_2_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 77, 97, 112, 5, 7, -38, -63, -61, 22, 96, -47, 3, 0, 2, 70, 0, 10, 108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 12, 119, 8, 0, 0, 0, 16, 0, 0, 0, 2, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 116, 0, 1, 97, 115, 113, 0, 126, 0, 2, 0, 0, 0, 1, 116, 0, 1, 98, 120};
        untypedMap_3_Bytes = new byte[]{-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 77, 97, 112, 5, 7, -38, -63, -61, 22, 96, -47, 3, 0, 2, 70, 0, 10, 108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 12, 119, 8, 0, 0, 0, 16, 0, 0, 0, 1, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 114, 97, 121, 76, 105, 115, 116, 120, -127, -46, 29, -103, -57, 97, -99, 3, 0, 1, 73, 0, 4, 115, 105, 122, 101, 120, 112, 0, 0, 0, 1, 119, 4, 0, 0, 0, 1, 116, 0, 1, 97, 120, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 120};
    }


    @Test
    public void testJdkSerialize() throws Exception {
        validate(binary_0_Bytes, dg.generateBinary_0(), "byte[]");
        validate(binary_1_Bytes, dg.generateBinary_1(), "byte[]");
        validate(binary_15_Bytes, dg.generateBinary_15(), "byte[]");
        validate(binary_16_Bytes, dg.generateBinary_16(), "byte[]");
        validate(binary_null_Bytes, dg.generateBinary_null(), "byte[]");
        validate(date_0_Bytes, dg.generateDate_0(), null);
        validate(date_1_Bytes, dg.generateDate_1(), null);
        validate(date_2_Bytes, dg.generateDate_2(), null);
        validate(double_0_0_Bytes, dg.generateDouble_0_0(), null);
        validate(double_0_001_Bytes, dg.generateDouble_0_001(), null);
        validate(double_127_0_Bytes, dg.generateDouble_127_0(), null);
        validate(double_128_0_Bytes, dg.generateDouble_128_0(), null);
        validate(double_1_0_Bytes, dg.generateDouble_1_0(), null);
        validate(double_2_0_Bytes, dg.generateDouble_2_0(), null);
        validate(double_32767_0_Bytes, dg.generateDouble_32767_0(), null);
        validate(double_3_14159_Bytes, dg.generateDouble_3_14159(), null);
        validate(double_65_536_Bytes, dg.generateDouble_65_536(), null);
        validate(double_m0_001_Bytes, dg.generateDouble_m0_001(), null);
        validate(double_m128_0_Bytes, dg.generateDouble_m128_0(), null);
        validate(double_m129_0_Bytes, dg.generateDouble_m129_0(), null);
        validate(double_m32768_0_Bytes, dg.generateDouble_m32768_0(), null);
        validate(false_Bytes, dg.generateFalse(), null);
        validate(int_0_Bytes, dg.generateInt_0(), null);
        validate(int_0x30_Bytes, dg.generateInt_0x30(), null);
        validate(int_0x3ffff_Bytes, dg.generateInt_0x3ffff(), null);
        validate(int_0x40000_Bytes, dg.generateInt_0x40000(), null);
        validate(int_0x7ff_Bytes, dg.generateInt_0x7ff(), null);
        validate(int_0x7fffffff_Bytes, dg.generateInt_0x7fffffff(), null);
        validate(int_0x800_Bytes, dg.generateInt_0x800(), null);
        validate(int_1_Bytes, dg.generateInt_1(), null);
        validate(int_47_Bytes, dg.generateInt_47(), null);
        validate(int_m0x40000_Bytes, dg.generateInt_m0x40000(), null);
        validate(int_m0x40001_Bytes, dg.generateInt_m0x40001(), null);
        validate(int_m0x800_Bytes, dg.generateInt_m0x800(), null);
        validate(int_m0x80000000_Bytes, dg.generateInt_m0x80000000(), null);
        validate(int_m0x801_Bytes, dg.generateInt_m0x801(), null);
        validate(int_m16_Bytes, dg.generateInt_m16(), null);
        validate(int_m17_Bytes, dg.generateInt_m17(), null);
        validate(long_0_Bytes, dg.generateLong_0(), null);
        validate(long_0x10_Bytes, dg.generateLong_0x10(), null);
        validate(long_0x3ffff_Bytes, dg.generateLong_0x3ffff(), null);
        validate(long_0x40000_Bytes, dg.generateLong_0x40000(), null);
        validate(long_0x7ff_Bytes, dg.generateLong_0x7ff(), null);
        validate(long_0x7fffffff_Bytes, dg.generateLong_0x7fffffff(), null);
        validate(long_0x800_Bytes, dg.generateLong_0x800(), null);
        validate(long_0x80000000_Bytes, dg.generateLong_0x80000000(), null);
        validate(long_1_Bytes, dg.generateLong_1(), null);
        validate(long_15_Bytes, dg.generateLong_15(), null);
        validate(long_m0x40000_Bytes, dg.generateLong_m0x40000(), null);
        validate(long_m0x40001_Bytes, dg.generateLong_m0x40001(), null);
        validate(long_m0x800_Bytes, dg.generateLong_m0x800(), null);
        validate(long_m0x80000000_Bytes, dg.generateLong_m0x80000000(), null);
        validate(long_m0x80000001_Bytes, dg.generateLong_m0x80000001(), null);
        validate(long_m0x801_Bytes, dg.generateLong_m0x801(), null);
        validate(long_m8_Bytes, dg.generateLong_m8(), null);
        validate(long_m9_Bytes, dg.generateLong_m9(), null);
        validate(null_Bytes, dg.generateNull(), null);
        validate(object_1_Bytes, dg.generateObject_1(), "object");
        validate(object_2_Bytes, dg.generateObject_2(), "object");
        validate(object_3_Bytes, dg.generateObject_3(), "object");
        validate(object_4_Bytes, dg.generateObject_4(), "object");
        validate(string_0_Bytes, dg.generateString_0(), null);
        validate(string_1_Bytes, dg.generateString_1(), null);
        validate(string_31_Bytes, dg.generateString_31(), null);
        validate(string_32_Bytes, dg.generateString_32(), null);
        validate(string_null_Bytes, dg.generateString_null(), null);
        validate(true_Bytes, dg.generateTrue(), null);
        validate(typedFixedList_0_Bytes, dg.generateTypedFixedList_0(), "string[]");
        validate(typedFixedList_1_Bytes, dg.generateTypedFixedList_1(), "string[]");
        validate(typedFixedList_7_Bytes, dg.generateTypedFixedList_7(), "string[]");
        validate(typedFixedList_8_Bytes, dg.generateTypedFixedList_8(), "string[]");
        validate(typedMap_0_Bytes, dg.generateTypedMap_0(), "map");
        validate(typedMap_1_Bytes, dg.generateTypedMap_1(), "map");
        validate(typedMap_2_Bytes, dg.generateTypedMap_2(), "map");
        validate(typedMap_3_Bytes, dg.generateTypedMap_3(), "map");
        validate(untypedFixedList_0_Bytes, dg.generateUntypedFixedList_0(), "list");
        validate(untypedFixedList_1_Bytes, dg.generateUntypedFixedList_1(), "list");
        validate(untypedFixedList_7_Bytes, dg.generateUntypedFixedList_7(), "list");
        validate(untypedFixedList_8_Bytes, dg.generateUntypedFixedList_8(), "list");
        validate(untypedMap_0_Bytes, dg.generateUntypedMap_0(), "map");
        validate(untypedMap_1_Bytes, dg.generateUntypedMap_1(), "map");
        validate(untypedMap_2_Bytes, dg.generateUntypedMap_2(), "map");
        validate(untypedMap_3_Bytes, dg.generateUntypedMap_3(), "map");
    }

    private static void validate(byte[] bytes, Object obj, String type) throws Exception {
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        bout.write(bytes);
        bout.close();
        byte[] body = bout.toByteArray();

        ByteArrayInputStream bin = new ByteArrayInputStream(body, 0, body.length);
        ObjectInputStream oin = new ObjectInputStream(bin);

        if (type == null) {
            type = "";
        }
        isEqual(obj, oin.readObject(), type);
        oin.close();
    }
}
